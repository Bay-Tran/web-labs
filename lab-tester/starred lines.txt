// constructor function for process unit

// *******************************************
//           DEPENDENCIES
// *******************************************

// see private array inputs for input connections to this unit from other units
// see public properties for info shared with other units and methods
// search for controller. & interfacer. & plotter. & simParams. & plotInfo

// *******************************************
//         define PRIVATE functions
// *******************************************

// *******************************************
//        define PRIVATE properties
// *******************************************

const unitIndex = pUnitIndex; // index of this unit as child in parent object processUnits
// unitIndex may be used in this unit's updateUIparams method

// define this unit's variables that are to receive input values from other units
let flowRate = 0; // input flow rate from feed process unit
let command = 0; // input command from controller process unit

// define INPUT CONNECTIONS from other units to this unit
// where inputs array is processed in this unit's updateInputs method
// where sourceVarNameString is name of a public var in source unit without 'this.'
// where thisUnitVarNameString is variable name in this unit, and to be, e.g.,
//        'privateVarName' for private var, and
//        'this.publicVarName' for public var
const inputs = [];
//        = [sourceUnitIndexNumber,sourceVarNameString,thisUnitVarNameString]
inputs[0] = [0,'flowRate','flowRate'];
inputs[1] = [2,'command','command'];

  // allow this unit to take more than one step within one main loop step in updateState method
  const unitStepRepeats = 1;
  let unitTimeStep = simParams.simTimeStep / unitStepRepeats;
  let ssCheckSum = 0; // used in checkForSteadyState method

  // DISPLAY CONNECTIONS FROM THIS UNIT TO HTML UI CONTROLS, see updateDisplay below
  const theDisplayReactorContentsID = "#div_PLOTDIV_reactorContents";


  // *******************************************
  //         define PUBLIC properties
  // *******************************************

  this.name = 'process unit Water Tank'; // used by interfacer.copyData()
  this.residenceTime = 0; // used by controller.checkForSteadyState()


  // define arrays to hold data for plots, color canvas
  // these will be filled with initial values in method reset()
  //
  // this.profileData = []; // for profile plots, plot script requires this name
  this.stripData = []; // for strip chart plots, plot script requires this name
  // this.colorCanvasData = []; // for color canvas, plot script requires this name

  // define arrays to hold info for variables
  // all used in interfacer.getInputValue() &/or interfacer.copyData() &/or plotInfo obj
  // these will be filled with values in method initialize()
  this.dataHeaders = []; // variable names
  this.dataInputs = []; // input field ID's
  this.dataUnits = [];
  this.dataMin = [];
  this.dataMax = [];
  this.dataInitial = [];
  this.dataValues = [];

  // *****************************************
  //        define PRIVILEGED methods
  // *****************************************

  this.initialize = function() {
    //
    // ADD ENTRIES FOR UI PARAMETER INPUTS FIRST, then output vars below
    //

    //
    // END OF INPUT VARS
    // record number of input variables, VarCount
    // used, e.g., in copy data to table
    //
    this.VarCount = v;
    //
    // OPTIONAL - add entries for output variables if want to use min-max to
    //            constrain values in updateState or dimensional units in plotInfo
    //

  } // END of initialize() method

  this.updateInputs = function() {
    //
    // GET INPUT CONNECTION VALUES FROM OTHER UNITS FROM PREVIOUS TIME STEP,
    //   SINCE updateInputs IS CALLED BEFORE updateState IN EACH TIME STEP
    // SPECIFY REFERENCES TO INPUTS ABOVE WHERE DEFINE inputs ARRAY

    for (i = 0; i < inputs.length; i++) {
      let connection = inputs[i];
      let sourceUnit = connection[0];
      let sourceVar = connection[1];
      let thisVar = connection[2];
      let sourceValue = processUnits[sourceUnit][sourceVar];
      eval(thisVar + ' = ' + sourceValue);
    }

    // check for change in overall main time step simTimeStep
    unitTimeStep = simParams.simTimeStep / unitStepRepeats;

  } // END of updateInputs() method
